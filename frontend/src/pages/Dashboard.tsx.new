import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Grid,
  Card,
  CardContent,
  Box,
  Alert,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Button,
  IconButton,
  Tooltip,
  CircularProgress,
  LinearProgress,
} from '@mui/material';
import {
  Inventory as InventoryIcon,
  Warning as WarningIcon,
  Assessment as AssessmentIcon,
  AttachMoney as MoneyIcon,
  Error as ErrorIcon,
  Schedule as ScheduleIcon,
  Refresh as RefreshIcon,
  ArrowUpward as ArrowUpIcon,
  ArrowDownward as ArrowDownIcon,
  Edit as EditIcon,
  CheckCircle as CheckCircleIcon,
  Science as ScienceIcon,
  LocalDining as LocalDiningIcon,
  MenuBook as MenuBookIcon,
  CloudDownload as DownloadIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import api from '../utils/api';

interface DashboardSummary {
  totalInventoryValue: {
    costValue: number;
    saleValue: number;
    profitMargin: number;
    costBreakdown: {
      rawMaterials: number;
      intermediateProducts: number;
      finishedProducts: number;
    };
    saleBreakdown: {
      rawMaterials: number;
      intermediateProducts: number;
      finishedProducts: number;
    };
  };
  inventoryCounts: {
    rawMaterials: number;
    intermediateProducts: number;
    finishedProducts: number;
    recipes: number;
    total: number;
  };
  stockStatus: {
    expiring: number;
    lowStock: number;
    reserved: number;
    contaminated: number;
  };
  alertBreakdown: {
    rawMaterials: {
      expiring: number;
      lowStock: number;
      contaminated: number;
      total: number;
    };
    intermediateProducts: {
      expiring: number;
      lowStock: number;
      contaminated: number;
      total: number;
    };
    finishedProducts: {
      expiring: number;
      lowStock: number;
      reserved: number;
      contaminated: number;
      total: number;
    };
  };
  productionStatus: {
    inProduction: number;
    onHold: number;
    completed: number;
    discarded: number;
  };
}

interface AlertItem {
  id: string;
  type: 'expiry' | 'lowStock' | 'contamination' | 'reservation';
  severity: 'high' | 'medium' | 'low';
  message: string;
  itemId: string;
  itemName: string;
  itemType: 'rawMaterial' | 'intermediateProduct' | 'finishedProduct';
  quantity?: number;
  unit?: string;
  date?: string;
  link: string;
}

const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
};

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
  }).format(value);
};

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const [summary, setSummary] = useState<DashboardSummary | null>(null);
  const [alerts, setAlerts] = useState<AlertItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [alertMessage, setAlertMessage] = useState<string | null>(null);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      setError(null);

      const [summaryResponse, alertsResponse] = await Promise.all([
        api.get('/dashboard/summary'),
        api.get('/dashboard/alerts'),
      ]);

      setSummary(summaryResponse.data.data);
      setAlerts(alertsResponse.data.data.slice(0, 5)); // Show top 5 alerts
      setLastRefresh(new Date());
    } catch (error) {
      console.error('Error fetching dashboard data', error);
      setError('Failed to load dashboard data. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDashboardData();
    // Poll for updates every 5 minutes
    const interval = setInterval(fetchDashboardData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  const handleRefresh = () => {
    fetchDashboardData();
  };

  const handleGenerateReport = () => {
    setIsGeneratingReport(true);
    
    // Simulate loading for 2 seconds
    setTimeout(() => {
      setIsGeneratingReport(false);
      setAlertMessage("Report generation will be implemented in the next sprint");
      
      // Auto dismiss after 6 seconds
      setTimeout(() => setAlertMessage(null), 6000);
    }, 2000);
  };

  // Format the percentages with + sign for positive values
  const formatPercentage = (value: number) => {
    const sign = value >= 0 ? '+' : '';
    return `${sign}${value.toFixed(1)}%`;
  };

  if (loading && !summary) {
    return (
      <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
          <CircularProgress size={60} />
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
      {/* Alert notification */}
      {alertMessage && (
        <Box
          sx={{
            position: 'fixed',
            top: '10%',
            left: '50%',
            transform: 'translateX(-50%)',
            zIndex: 9999,
            minWidth: '300px',
            maxWidth: '80%',
          }}
        >
          <Alert 
            severity="success"
            onClose={() => setAlertMessage(null)}
            sx={{ boxShadow: 3, width: '100%' }}
          >
            {alertMessage}
          </Alert>
        </Box>
      )}

      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h3" component="h1">
          Dashboard
        </Typography>
        <Box display="flex" alignItems="center" gap={2}>
          <Typography variant="body2" color="text.secondary">
            Last updated: {formatDate(lastRefresh.toISOString())}
          </Typography>
          <Tooltip title="Refresh data">
            <IconButton onClick={handleRefresh} disabled={loading}>
              <RefreshIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {loading && <LinearProgress sx={{ mb: 2 }} />}

      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {summary && (
        <>
          {/* Rest of your dashboard code here - preserved from the original file */}
